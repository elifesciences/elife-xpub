// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test configuration should load correct configuration: test 1`] = `
Config {
  "authsome": Object {
    "isPublic": true,
    "mode": "/home/peter/dev/elife-xpub/config/non-serializable/authsome.js",
  },
  "aws": Object {
    "credentials": Object {
      "accessKeyId": "test",
      "region": "eu-west-1",
      "secretAccessKey": "",
    },
    "s3": Object {
      "endpoint": Endpoint {
        "constructor": [Function],
        "host": "",
        "hostname": "localhost",
        "href": "",
        "path": "/",
        "pathname": "/",
        "port": "",
        "protocol": "http:",
      },
      "params": Object {
        "Bucket": "test",
      },
      "s3ForcePathStyle": true,
    },
  },
  "client": Object {
    "isPublic": true,
    "majorSubjectAreas": Object {
      "biochemistry-chemical-biology": "Biochemistry and Chemical Biology",
      "cancer-biology": "Cancer Biology",
      "cell-biology": "Cell Biology",
      "chromosomes-gene-expression": "Chromosomes and Gene Expression",
      "computational-systems-biology": "Computational and Systems Biology",
      "developmental-biology": "Developmental Biology",
      "ecology": "Ecology",
      "epidemiology-global-health": "Epidemiology and Global Health",
      "evolutionary-biology": "Evolutionary Biology",
      "genetics-genomics": "Genetics and Genomics",
      "human-biology-medicine": "Human Biology and Medicine",
      "immunology-inflammation": "Immunology and Inflammation",
      "microbiology-infectious-disease": "Microbiology and Infectious Disease",
      "neuroscience": "Neuroscience",
      "physics-living-systems": "Physics of Living Systems",
      "plant-biology": "Plant Biology",
      "stem-cells-and-regenerative-medicine": "Stem Cells and Regenerative Medicine",
      "structural-biology-molecular-biophysics": "Structural Biology and Molecular Biophysics",
    },
  },
  "configTag": "test",
  "fileUpload": Object {
    "isPublic": true,
    "maxSizeMB": 10,
  },
  "git": Object {
    "ref": "",
    "sha": "",
  },
  "googleAnalytics": Object {
    "isPublic": true,
    "trackingId": "",
  },
  "hotJar": Object {
    "enabled": true,
    "isPublic": true,
    "snippetVersion": 6,
  },
  "login": Object {
    "enableMock": true,
    "isPublic": true,
    "legacySubmissionUrl": "https://submit.elifesciences.org",
    "signupUrl": "https://orcid.org/register",
    "url": "/mock-token-exchange/ewwboc7m",
  },
  "mailer": Object {
    "from": "dev@example.com",
    "path": "/home/peter/dev/elife-xpub/config/non-serializable/fake-mailer",
    "transport": Object {
      "auth": Object {
        "pass": "pass",
        "user": "user",
      },
      "port": 1025,
      "sendmail": false,
    },
  },
  "meca": Object {
    "apiKey": "abcd1234",
    "email": Object {
      "recipient": "test@example.com",
      "sender": "errors@elifesciences.org",
      "subjectPrefix": "",
    },
    "s3": Object {
      "disableUpload": false,
      "remotePath": "meca-archive",
    },
    "sftp": Object {
      "connectionOptions": Object {
        "host": "localhost",
        "password": "tset",
        "port": 3022,
        "username": "test",
      },
      "disableUpload": false,
      "remotePath": "/test",
    },
  },
  "newrelic": Object {
    "applicationID": "",
    "isPublic": true,
    "licenseKey": "",
  },
  "pubsweet": Object {
    "components": Array [
      "@elifesciences/component-meca",
      "@elifesciences/component-elife-app",
      "@elifesciences/component-model-semantic-extraction",
      "@elifesciences/component-model-manuscript",
      "@elifesciences/component-model-file",
      "@elifesciences/component-model-audit-log",
      "@elifesciences/component-model-identity",
      "@elifesciences/component-model-team",
      "@elifesciences/component-model-user",
      "@elifesciences/component-model",
      "@elifesciences/component-service-s3",
      "@elifesciences/component-dashboard",
      "@elifesciences/component-submission",
      "@pubsweet/component-send-email",
    ],
  },
  "pubsweet-client": Object {
    "API_ENDPOINT": "/api",
    "isPublic": true,
    "login-redirect": "/",
  },
  "pubsweet-server": Object {
    "baseUrl": "http://localhost:4000",
    "db": Object {
      "database": "test",
      "host": "localhost",
      "idleTimeoutMillis": 800,
      "password": "",
      "port": 5432,
      "user": "",
    },
    "enableExperimentalGraphql": true,
    "logger": Object {
      "Container": [Function],
      "Logger": [Function],
      "Transport": [Function],
      "_events": Object {},
      "_eventsCount": 0,
      "_getExceptionHandlers": [Function],
      "_maxListeners": undefined,
      "_names": Array [
        "console",
        "file",
      ],
      "_onError": [Function],
      "_uncaughtException": [Function],
      "add": [Function],
      "addColors": [Function],
      "addListener": [Function],
      "clear": [Function],
      "cli": [Function],
      "clone": [Function],
      "close": [Function],
      "config": Object {
        "addColors": [Function],
        "allColors": Object {
          "alert": "yellow",
          "crit": "red",
          "data": "grey",
          "debug": "blue",
          "emerg": "red",
          "error": "red",
          "help": "cyan",
          "info": "green",
          "input": "grey",
          "notice": "yellow",
          "prompt": "grey",
          "silly": "magenta",
          "verbose": "cyan",
          "warn": "yellow",
          "warning": "red",
        },
        "cli": Object {
          "colors": Object {
            "data": "grey",
            "debug": "blue",
            "error": "red",
            "help": "cyan",
            "info": "green",
            "input": "grey",
            "prompt": "grey",
            "silly": "magenta",
            "verbose": "cyan",
            "warn": "yellow",
          },
          "levels": Object {
            "data": 3,
            "debug": 5,
            "error": 0,
            "help": 2,
            "info": 4,
            "input": 8,
            "prompt": 6,
            "silly": 9,
            "verbose": 7,
            "warn": 1,
          },
        },
        "colorize": [Function],
        "npm": Object {
          "colors": Object {
            "debug": "blue",
            "error": "red",
            "info": "green",
            "silly": "magenta",
            "verbose": "cyan",
            "warn": "yellow",
          },
          "levels": Object {
            "debug": 4,
            "error": 0,
            "info": 2,
            "silly": 5,
            "verbose": 3,
            "warn": 1,
          },
        },
        "syslog": Object {
          "colors": Object {
            "alert": "yellow",
            "crit": "red",
            "debug": "blue",
            "emerg": "red",
            "error": "red",
            "info": "green",
            "notice": "yellow",
            "warning": "red",
          },
          "levels": Object {
            "alert": 1,
            "crit": 2,
            "debug": 7,
            "emerg": 0,
            "error": 3,
            "info": 6,
            "notice": 5,
            "warning": 4,
          },
        },
      },
      "configure": [Function],
      "debug": [Function],
      "domain": null,
      "emit": [Function],
      "emitErrs": false,
      "error": [Function],
      "eventNames": [Function],
      "exception": Object {
        "getAllInfo": [Function],
        "getOsInfo": [Function],
        "getProcessInfo": [Function],
        "getTrace": [Function],
      },
      "exceptionHandlers": Object {},
      "exitOnError": true,
      "extend": [Function],
      "filters": Array [
        [Function],
      ],
      "getMaxListeners": [Function],
      "handleExceptions": [Function],
      "hash": [Function],
      "id": null,
      "info": [Function],
      "level": "info",
      "levels": Object {
        "debug": 4,
        "error": 0,
        "info": 2,
        "silly": 5,
        "verbose": 3,
        "warn": 1,
      },
      "listenerCount": [Function],
      "listeners": [Function],
      "log": [Function],
      "loggers": Object {
        "_delete": [Function],
        "add": [Function],
        "close": [Function],
        "default": Object {
          "transports": Array [
            Object {
              "_events": Object {},
              "_eventsCount": 0,
              "_maxListeners": undefined,
              "addListener": [Function],
              "align": false,
              "colorize": false,
              "depth": null,
              "domain": null,
              "emit": [Function],
              "eol": "
",
              "eventNames": [Function],
              "exceptionsLevel": "error",
              "formatQuery": [Function],
              "formatResults": [Function],
              "formatter": undefined,
              "getMaxListeners": [Function],
              "handleExceptions": false,
              "humanReadableUnhandledException": false,
              "json": false,
              "label": null,
              "level": "silly",
              "listenerCount": [Function],
              "listeners": [Function],
              "log": [Function],
              "logException": [Function],
              "logstash": false,
              "name": "console",
              "normalizeQuery": [Function],
              "on": [Function],
              "once": [Function],
              "prependListener": [Function],
              "prependOnceListener": [Function],
              "prettyPrint": false,
              "raw": false,
              "removeAllListeners": [Function],
              "removeListener": [Function],
              "setMaxListeners": [Function],
              "showLevel": true,
              "silent": false,
              "stderrLevels": Object {
                "debug": true,
                "error": true,
              },
              "timestamp": false,
            },
          ],
        },
        "get": [Function],
        "has": [Function],
        "loggers": Object {},
        "options": Object {},
      },
      "longestElement": [Function],
      "on": [Function],
      "once": [Function],
      "padLevels": false,
      "prependListener": [Function],
      "prependOnceListener": [Function],
      "profile": [Function],
      "profilers": Object {},
      "query": [Function],
      "remove": [Function],
      "removeAllListeners": [Function],
      "removeListener": [Function],
      "rewriters": Array [],
      "setLevels": [Function],
      "setMaxListeners": [Function],
      "silly": [Function],
      "startTimer": [Function],
      "stream": [Function],
      "stripColors": false,
      "transports": Object {
        "Console": [Function],
        "File": [Function],
        "Http": [Function],
        "Memory": [Function],
        "console": Object {
          "_events": Object {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          "_onError": [Function],
          "addListener": [Function],
          "align": false,
          "colorize": false,
          "depth": null,
          "domain": null,
          "emit": [Function],
          "eol": "
",
          "eventNames": [Function],
          "exceptionsLevel": "error",
          "formatQuery": [Function],
          "formatResults": [Function],
          "formatter": undefined,
          "getMaxListeners": [Function],
          "handleExceptions": false,
          "humanReadableUnhandledException": false,
          "json": false,
          "label": null,
          "level": "warn",
          "listenerCount": [Function],
          "listeners": [Function],
          "log": [Function],
          "logException": [Function],
          "logstash": false,
          "name": "console",
          "normalizeQuery": [Function],
          "on": [Function],
          "once": [Function],
          "prependListener": [Function],
          "prependOnceListener": [Function],
          "prettyPrint": false,
          "raw": false,
          "removeAllListeners": [Function],
          "removeListener": [Function],
          "setMaxListeners": [Function],
          "showLevel": true,
          "silent": false,
          "stderrLevels": Object {
            "debug": true,
            "error": true,
          },
          "timestamp": false,
        },
        "file": Object {
          "_archive": null,
          "_basename": "xpub.log",
          "_buffer": Array [],
          "_checkMaxFilesIncrementing": [Function],
          "_checkMaxFilesTailable": [Function],
          "_createStream": [Function],
          "_created": 0,
          "_draining": false,
          "_events": Object {},
          "_eventsCount": 0,
          "_failures": 0,
          "_getFile": [Function],
          "_incFile": [Function],
          "_lazyDrain": [Function],
          "_maxListeners": undefined,
          "_onError": [Function],
          "_opening": false,
          "_size": 0,
          "_write": [Function],
          "addListener": [Function],
          "close": [Function],
          "colorize": false,
          "depth": null,
          "dirname": "./",
          "domain": null,
          "emit": [Function],
          "eol": "
",
          "eventNames": [Function],
          "exceptionsLevel": "error",
          "filename": "xpub.log",
          "flush": [Function],
          "formatQuery": [Function],
          "formatResults": [Function],
          "formatter": undefined,
          "getMaxListeners": [Function],
          "handleExceptions": false,
          "humanReadableUnhandledException": false,
          "json": true,
          "label": null,
          "level": undefined,
          "listenerCount": [Function],
          "listeners": [Function],
          "log": [Function],
          "logException": [Function],
          "logstash": false,
          "maxFiles": null,
          "maxRetries": 2,
          "maxsize": null,
          "name": "file",
          "normalizeQuery": [Function],
          "on": [Function],
          "once": [Function],
          "open": [Function],
          "options": Object {
            "flags": "a",
            "highWaterMark": 24,
          },
          "prependListener": [Function],
          "prependOnceListener": [Function],
          "prettyPrint": false,
          "query": [Function],
          "raw": false,
          "removeAllListeners": [Function],
          "removeListener": [Function],
          "rotationFormat": false,
          "setMaxListeners": [Function],
          "showLevel": true,
          "silent": false,
          "stream": [Function],
          "stringify": undefined,
          "tailable": false,
          "timestamp": true,
          "zippedArchive": false,
        },
      },
      "unhandleExceptions": [Function],
      "verbose": [Function],
      "version": "2.4.4",
      "warn": [Function],
    },
    "morganLogFormat": ":remote-addr [:date[clf]] :method :url :status :graphql[operation] :res[content-length] :response-time ms",
    "port": 4000,
    "secret": "",
    "uploads": "test/temp/uploads",
  },
  "schema": Object {},
  "scienceBeam": Object {
    "timeoutMs": 20000,
    "url": "https://sciencebeam-texture.elifesciences.org/api/convert",
  },
  "server": Object {
    "api": Object {
      "secret": "",
      "url": "https://prod--gateway.elifesciences.org/",
    },
  },
  "titles": Object {
    "": "Dashboard | eLife",
    "author-guide": "Author guide | eLife",
    "contact-us": "Contact us | eLife",
    "isPublic": true,
    "login": "Login | eLife",
    "reviewer-guide": "Reviewer guide | eLife",
    "submit": "Submit | eLife",
  },
  "validations": "/home/peter/dev/elife-xpub/config/non-serializable/validations.js",
}
`;
