extend type Query {
  manuscript(id: ID!): Manuscript!
  manuscripts: [Manuscript]!
}

extend type Mutation {
  createManuscript: Manuscript!
  deleteManuscript(id: ID!): ID!
  updateManuscript(data: ManuscriptInput!): Manuscript!
  uploadManuscript(id: ID!, file: Upload!, fileSize: Int!): Manuscript!
  uploadSupportingFile(id: ID!, file: Upload!): Manuscript!
  removeSupportingFiles(id: ID!): Manuscript!
  removeUploadedManuscript(id: ID!): Manuscript!
  submitManuscript(data: ManuscriptInput!): Manuscript!
  savePage(url:String!, id:String!):Manuscript!
}

extend type Manuscript {
  # todo: these should be handled through teams
  author: Alias
  clientStatus: String!

  # todo: these should be handled through notes
  opposedSeniorEditorsReason: String
  opposedReviewingEditorsReason: String
  opposedReviewersReason: String
  coverLetter: String
}

input ManuscriptInput {
  id: ID!
  suggestedSeniorEditors: [ID]
  opposedSeniorEditors: [ID]
  opposedSeniorEditorsReason: String
  suggestedReviewingEditors: [ID]
  opposedReviewingEditors: [ID]
  opposedReviewingEditorsReason: String
  suggestedReviewers: [ReviewerAliasInput]
  opposedReviewers: [OpposedReviewerInput]
  opposedReviewersReason: String
  coverLetter: String
  author: AuthorAliasInput
  previouslyDiscussed: String
  previouslySubmitted: [String]
  cosubmission: [String!]!
  submitterSignature: String
  disclosureConsent: Boolean
  meta: ManuscriptMetaInput
}

input ManuscriptMetaInput {
  title: String
  articleType: String
  subjects: [String]
}

# temporary solution awaiting more clarity on team member metadata in shared data model
union Assignee = EditorAlias | ReviewerAlias | AuthorAlias
type AuthorAlias {
  firstName: String
  lastName: String
  email: String
  aff: String
}
input AuthorAliasInput {
  firstName: String
  lastName: String
  email: String
  aff: String
}
type EditorAlias {
  id: ID
  name: String
  aff: String
  focuses: [String]
  expertises: [String]
}
type ReviewerAlias {
  name: String
  email: String
}
input ReviewerAliasInput {
  name: String
  email: String
}
type OpposedReviewer {
  name: String
  email: String
}
input OpposedReviewerInput {
  name: String
  email: String
}

